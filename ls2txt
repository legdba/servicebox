#!/usr/bin/env python
###############################################################################
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
###############################################################################

import sys
import json

class bcolors:
    MSG  = '\033[36m'
    MDC  = '\033[39m'
    LVL  = {'TRACE':'\033[33m', 'DEBUG':'\033[33m', 'INFO':'\033[36m', 'WARN':'\033[35m', 'ERROR':'\033[31m'}
    ENDC = '\033[0m'
    
###############################################################################
def display_raw(line):
    sys.stdout.write(line)
    
###############################################################################
def display_json(line):
    """
    Get a line, try to parse it as a JSON logstash document.
    Upon success display it as a human readable log event.
    Upon failure raise an exception.
    :param line: the line to parse as a json document
    """
    j = json.loads(line)

    ts = j['@timestamp']
    ver = j['@version']
    msg = j.get('message', '')
    stack_trace = j.get('stack_trace', None)
    logger = j['logger_name']
    level = j['level']
    host = j['HOSTNAME']

    filter_out = [\
                '@timestamp',\
                '@version',\
                'message',\
                'stack_trace',\
                'logger_name',\
                'level',\
                'HOSTNAME',\
                'thread_name',\
                'level_value']
    props = { key:value for key, value in j.items() if not key in filter_out }
    
    if props == {} :
        props = ''
    else:
        props = ' (%s%s%s)' %  (bcolors.MDC, ', '.join("%s='%s'" % (key,val) for (key,val) in props.iteritems()), bcolors.ENDC)
        
    print "[%s]  %s%s%s: %s on %s: %s%s%s%s" %(ts, bcolors.LVL[level], level, bcolors.ENDC, logger, host, bcolors.MSG, msg, bcolors.ENDC, props)
        
    if stack_trace:
        sys.stdout.write(stack_trace)
    
###############################################################################
def display(line):
    try:
        display_json(line)
    except Exception,e:
        #print e
        display_raw(line)

###############################################################################
def main():
    """
    Read lines from stdin and try to parse them as logstash one-line standard
    JSON document to print them in a human-readable format to stdout. Non-JSON
    are printed to stdout unchanged.
    """
    while 1:
        try:
            line = sys.stdin.readline()
        except KeyboardInterrupt:
            break
        if not line:
            break
        display(line)

###############################################################################
if __name__ == "__main__":
    main()